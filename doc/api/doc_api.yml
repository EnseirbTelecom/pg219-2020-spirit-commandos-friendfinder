# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
openapi: '3.0.1'
info:
  title: 'FriendFinder'
  description: "Application mobile pour la géolocalisation des amis"
  version: 1.0.1
servers:
  - url: https://localhost:8082/api
    description: Development server
paths:
  /signup:
    post:
      summary: ajouter un nouvel utilisateur dans la base de données
      requestBody:
        description: Les paramètres d'unutilisateur
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        200:
          description: opération réusssie
          content:
            application/json:
              schema:
                text: 
                  type: string
        403:
          description: adresse mail déjà utilisée
          content: {}
  /signin:
    post:
      summary: permet à un utilisateur de se connecter à son compte sur l'application 
      requestBody:
        description: L'adresse mail et le mot de passe de l'utilisateur
        content:
          application/json:
            schema:
              type: Object
              properties:
                mail:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: Utilisateur authentifié
          content:
            application/json:
              schema:
                text: 
                  type: string
        403:
          description: identifiants incorrects
          content: {}
  /greeting:
    get:
      operationId: getHello
      parameters:
        - name: nom
          in: query
          description: returns hello
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Greeting'
        400:
          description: invalid operation
          content: {}
  /user_info:
    post:
      summary: Get user info from request
      operationId: userInfo
      requestBody:
        description: user info added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfo'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
      x-codegen-request-body-name: body
  /is_bot:
    get:
      operationId: isBot
      parameters:
        - name: id
          in: query
          description: returns true or false (is a bot or no)
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        400:
          description: invalid operation
          content: {}
    post:
      summary: Set bot value
      operationId: setBot
      requestBody:
        description: change bot value
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botValue'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
  /setAsBot:
    put:
      operationId: setAsBot
      parameters:
        - name: id
          in: query
          description: sets a user as a bot
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        400:
          description: invalid operation
          content: {}
  /captcha:
    get:
      operationId: getCaptchaResponse
      parameters:
        - name: recaptcha
          in: query
          description: returns captcha response
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: id
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Captcha'
        400:
          description: invalid operation
          content: {}
components:
  schemas:
    user:
      type: Object
      properties:
        mail:
          type: string
        password:
          type: string
        nom:
          type: string
        prenom:
          type: string
        pseudo:
          type: string
        date:
          type: string
    Captcha:
      type: Object
      properties:
        id:
          type: integer
          format: int64
        resp:
          type: string
    Bot:
      type: Object
      properties:
        id:
          type: string
        resp:
          type: boolean
    Greeting:
      type: Object
      properties:
        id:
          type: integer
          format: int64
        resp:
          type: string
    botValue:
      type: Object
      properties:
        id:
          type: string
        value:
          type: integer
    userInfo:
      type: Object
      properties:
        ip:
          type: string
        userAgent:
          type: string
        language:
          type: string
        cookie:
          type: string
        keyboard:
          type: boolean
        mouse:
          type: boolean
        screenx:
          type: integer
          format: int64
        screeny:
          type: integer
          format: int64
        nbRequest:
          type: integer
        bot:
          type: boolean
